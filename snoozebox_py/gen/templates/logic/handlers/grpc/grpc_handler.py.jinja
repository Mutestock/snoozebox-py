from logic.handlers.handler_utils.crud_handler_component import (
    CrudHandlerComponent
)
from logic.handlers.handler_utils.utils_handler_component import (
    UtilsHandlerComponent
)
from protogen import {{schematic.name.lower()}}_pb2
from logic.handlers.handler_utils.generic_tools import(
    SUCCESFUL_TRANSACTION,
    make_error_message,
)
from models.{{schematic.name.lower()}} import {{schematic.name.capitalize()}}
from pipe import map
import logging


class {{schematic.name.capitalize()}}Handler:
    def __init__(self):
        self.object_instance = {{schematic.name.capitalize()}}()
        self.crud_component = CrudHandlerComponent(object_instance=self.object_instance)
        self.utils_component = UtilsHandlerComponent(object_instance=self.object_instance)

    {% if "create" in config["crud_instructions"] %}
    def create(
        self, request: {{schematic.name.lower()}}_pb2.Create{{schematic.name.capitalize()}}Request
    ) -> {{schematic.name.lower()}}_pb2.Create{{schematic.name.capitalize()}}Response:
        try:
            self.crud_component.create({{schematic.name.capitalize()}}(grpc_{{schematic.name.lower()}}_object=request.new_{{schematic.name.lower()}}_object))
            return {{schematic.name.lower()}}_pb2.Create{{schematic.name.capitalize()}}Response(msg=SUCCESFUL_TRANSACTION)
        except Exception as ex:
            logging.error(
                f"{{schematic.name.capitalize()}} create failed. Error: {ex}, type = {type(ex)}"
            )
            return {{schematic.name.lower()}}_pb2.Create{{schematic.name.capitalize()}}Response(
                msg=make_error_message(ex) + " " + str(request)
            )
    {% endif %}
    {% if "read" in config["crud_instructions"] %}
    def read(
        self, request: {{schematic.name.lower()}}_pb2.Read{{schematic.name.capitalize()}}Request
    ) -> {{schematic.name.lower()}}_pb2.Read{{schematic.name.capitalize()}}Response:
        {{schematic.name.lower()}}: dict = {}
        try:
            {{schematic.name.lower()}} = self.crud_component.read(request.id)
            return {{schematic.name.lower()}}_pb2.Read{{schematic.name.capitalize()}}Response(
                {{schematic.name.lower()}}_object={{schematic.name.lower()}}, msg=SUCCESFUL_TRANSACTION
            )
        except Exception as ex:
            logging.error(
                f"{{schematic.name.capitalize()}} read failed id: {request.id}, Error: {ex}, {{"{"}}{{schematic.name.lower()}}{{"}"}} = {{"{"}}{{schematic.name.capitalize()}}(){{"}"}}, type = {type(ex)}"
            )
            return {{schematic.name.lower()}}_pb2.Read{{schematic.name.capitalize()}}Response(msg=make_error_message(ex))
    {% endif %}
    {% if "update" in config["crud_instructions"] %}
    def update(
        self, request: {{schematic.name.lower()}}_pb2.Update{{schematic.name.capitalize()}}Request
    ) -> {{schematic.name.lower()}}_pb2.Update{{schematic.name.capitalize()}}Response:
        {{schematic.name.lower()}}: dict = {}
        try:
            {{schematic.name.lower()}} = {{schematic.name.capitalize()}}(grpc_{{schematic.name.lower()}}_object=request.new_{{schematic.name.lower()}}_object)
            self.crud_component.update(id=request.id, obj={{schematic.name.lower()}})
            return {{schematic.name.lower()}}_pb2.Update{{schematic.name.capitalize()}}Response(msg=SUCCESFUL_TRANSACTION)
        except Exception as ex:
            logging.error(
                f"{{schematic.name.capitalize()}} update failed Error: {ex}, {{"{"}}{{schematic.name.lower()}}{{"}"}} = {{"{"}}{{schematic.name.capitalize()}}{{"}"}}(), type = {type(ex)}"
            )
            return {{schematic.name.lower()}}_pb2.Update{{schematic.name.capitalize()}}Response(msg=make_error_message(ex))
    {% endif %}
    {% if "delete" in config["crud_instructions"]%}
    def delete(
        self, request: {{schematic.name.lower()}}_pb2.Delete{{schematic.name.capitalize()}}Request
    ) -> {{schematic.name.lower()}}_pb2.Delete{{schematic.name.capitalize()}}Response:
        try:
            self.crud_component.delete(id=request.id)
            return {{schematic.name.lower()}}_pb2.Delete{{schematic.name.capitalize()}}Response(msg=SUCCESFUL_TRANSACTION)
        except Exception as ex:
            logging.error(
                f"{{schematic.name.capitalize()}} delete failed id: {request.id}, Error: {ex}, {{schematic.name.lower()}} = {{schematic.name.capitalize()}}(), type = {type(ex)}"
            )
            return {{schematic.name.lower()}}_pb2.Delete{{schematic.name.capitalize()}}Response(msg=make_error_message(ex))
    {% endif %}
    {% if "read_list" in config["crud_instructions"]%}
    def read_list(
        self, _: {{schematic.name.lower()}}_pb2.Read{{schematic.name.capitalize()}}ListRequest
    ) -> {{schematic.name.lower()}}_pb2.Read{{schematic.name.capitalize()}}ListResponse:
        try:
            return {{schematic.name.lower()}}_pb2.Read{{schematic.name.capitalize()}}ListResponse(
                {{schematic.name.lower()}}_objects=self.crud_component.read_list(),
                msg=SUCCESFUL_TRANSACTION,
            )
        except Exception as ex:
            logging.error(f"{{schematic.name.capitalize()}} read list failed: Error: {ex}, type = {type(ex)}")
            return {{schematic.name.lower()}}_pb2.Read{{schematic.name.capitalize()}}ListResponse(msg=make_error_message(ex))
    {% endif %}
